16. Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password. Include your run-time code in a main method.
Extra: Ask the user how strong they want their password to be. For weak passwords, pick a word or two from a list.

  import random
  import string

  def get_random_string():
      power = str(input("Do you want a <strong> or <weak> password? "))
      if power == "strong":
          len1 = random.randint(4,10)
          len2 = random.randint(2,3)
          len3 = random.randint(1,2)

          result_str1 = ''.join(random.choice(string.ascii_letters) for i in range(len1))
          result_str2 = ''.join(random.choice(string.digits) for i in range(len2))
          result_str3 = ''.join(random.choice(string.punctuation) for i in range(len3))
          print(result_str1+result_str2+result_str3)
      elif power == "weak":
          weakPasswords = ['weakPassword:(', 'notSoWeakP@ssw0rd<3', 'veryweak', 'p@ssw0Rd']
          random.shuffle(weakPasswords)
          print(weakPasswords[0])
      else: print("Input is not correct. Type weak or strong.")
    
  get_random_string()

17. This is the first 4-chili exercise of this blog! We’ll see what people think, and decide whether or not to continue with 4-chili exercises in the future.
Use the BeautifulSoup and requests Python packages to print out a list of all the article titles on the New York Times homepage.

Yes, I will skip it.

18. Create a program that will play the “cows and bulls” game with the user. The game works like this:
Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly in the correct place, they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.” Every time the user makes a guess, tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses the user makes throughout teh game and tell the user at the end.

  import random
  print("Welcome to cows and bulls game.")
  def split(word):
      return list(word)
  number = []
  yourGuess = []

  number.append(str(random.randint(1,9)))
  for x in range(3):
      number.append(str(random.randint(0,9)))    
  print(number)
  while yourGuess != number:
      cows = 0
      bulls = 0
      yourGuess = str(input("Try to guess a number 1000-9999: "))
      yourGuess = split(yourGuess)
      for x in range (0,4):
          if yourGuess[x] == number[x]:
              cows = cows +1
          else: 
              if yourGuess[x] in number:
                  bulls = bulls +1

      print("You have " + str(cows) + " cows and " + str(bulls) + " bulls.")

  print("Congrats!")

19. Using the requests and BeautifulSoup Python libraries, print to the screen the full text of the article on this website: http://www.vanityfair.com/society/2014/06/monica-lewinsky-humiliation-culture.
The article is long, so it is split up between 4 pages. Your task is to print out the text to the screen so that you can read the full article without having to click any buttons.
maybe next time


20. Write a function that takes an ordered list of numbers (a list where the elements are in order from smallest to largest) and another number. The function decides whether or not the given number is inside the list and returns (then prints) an appropriate boolean.



